parameters:
  pwsh: true

steps:
  - powershell: |
      Write-Host "Installing pwsh..."
      if (Get-Command pwsh -ErrorAction Ignore)
      {
          Write-Host "pwsh already installed, skipping"
          return
      }
      $powerShellPath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'powershell'
      Invoke-WebRequest -Uri https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/install-powershell.ps1 -outfile ./install-powershell.ps1
      ./install-powershell.ps1 -Destination $powerShellPath -Daily
      $vstsCommandString = "vso[task.setvariable variable=PATH]$powerShellPath;$env:PATH"
      Write-Host "sending " + $vstsCommandString
      Write-Host "##$vstsCommandString"
    displayName: Install PowerShell daily

  - pwsh: Get-ChildItem -Path env:
    displayName: Capture environment
    condition: succeededOrFailed()

  - pwsh: $PSVersionTable
    displayName: Capture environment
    condition: succeededOrFailed()

  - pwsh: Write-Host "##vso[build.updatebuildnumber]$env:BUILD_SOURCEBRANCHNAME-$env:BUILD_SOURCEVERSION-$((get-date).ToString("yyyyMMddhhmmss"))"
    displayName: Set Build Name for Non-PR
    condition: ne(variables['Build.Reason'], 'PullRequest')
  - task: PowerShell@2
    inputs:
      filePath: scripts/azurePipelinesBuild.ps1
      pwsh: ${{ parameters.pwsh }}
  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    inputs:
      testRunner: NUnit
      testResultsFiles: '**/TestResults.xml'
    condition: succeededOrFailed()
  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: PowerShellEditorServices-CI
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    condition: succeededOrFailed()
