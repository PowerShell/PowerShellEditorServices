parameters:
- name: pwsh
  type: boolean
  default: true

steps:
- task: PowerShell@2
  displayName: PowerShell version
  inputs:
    targetType: inline
    script: $PSVersionTable
    pwsh: ${{ parameters.pwsh }}

- task: UseDotNet@2
  displayName: Install .NET 7.0.x SDK
  inputs:
    packageType: sdk
    version: 7.0.x
    performMultiLevelLookup: true

- task: UseDotNet@2
  displayName: Install .NET 6.0.x runtime
  inputs:
    packageType: runtime
    version: 6.0.x
    performMultiLevelLookup: true

- task: PowerShell@2
  displayName: Build
  inputs:
    filePath: tools/azurePipelinesBuild.ps1
    pwsh: ${{ parameters.pwsh }}

- task: PowerShell@2
  displayName: Test
  inputs:
    targetType: inline
    script: Invoke-Build Test -Configuration Release
    pwsh: ${{ parameters.pwsh }}

- task: PublishTestResults@2
  displayName: Publish test results
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
  condition: succeededOrFailed()

- task: PowerShell@2
  displayName: Assert PowerShellEditorServices release configuration
  inputs:
    targetType: inline
    script: |
      $assembly = [Reflection.Assembly]::LoadFile("$(Build.SourcesDirectory)/module/PowerShellEditorServices.VSCode/bin/Microsoft.PowerShell.EditorServices.VSCode.dll")
      if ($assembly.GetCustomAttributes([System.Diagnostics.DebuggableAttribute], $true).IsJITOptimizerDisabled) {
        Write-Host "##vso[task.LogIssue type=error;] PowerShell Editor Services bits were not built in release configuration!"
        exit 1
      }
    pwsh: ${{ parameters.pwsh }}

# NOTE: We zip the artifacts because they're ~20 MB compressed, but ~300 MB raw,
# and we have limited pipeline artifact storage space.
- task: ArchiveFiles@2
  displayName: Zip build output
  inputs:
    rootFolderOrFile: module
    includeRootFolder: false
    archiveType: zip
    archiveFile: PowerShellEditorServices-Build.zip
    verbose: true

- publish: PowerShellEditorServices-Build.zip
  artifact: PowerShellEditorServices-Build-$(System.JobId)
  displayName: Publish build output archive

- task: ArchiveFiles@2
  displayName: Zip sources with `project.assets.json`
  inputs:
    rootFolderOrFile: src
    includeRootFolder: false
    archiveType: zip
    archiveFile: PowerShellEditorServices-Sources.zip
    verbose: true

- publish: PowerShellEditorServices-Sources.zip
  artifact: PowerShellEditorServices-Sources-$(System.JobId)
  displayName: Publish sources archive
