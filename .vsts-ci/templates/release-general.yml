steps:
- download: current
  displayName: Download unsigned pipeline artifacts

- task: ExtractFiles@1
  displayName: Extract unsigned artifacts
  inputs:
    archiveFilePatterns: $(Pipeline.Workspace)/PowerShellEditorServices-Build-*/PowerShellEditorServices-Build.zip
    destinationFolder: $(Pipeline.Workspace)/Unsigned
    cleanDestinationFolder: true

- checkout: ComplianceRepo

# NOTE: The signing templates explicitly copy everything along as they run, so
# the last output path has every signed (and intentionally unsigned) file.
- template: EsrpSign.yml@ComplianceRepo
  parameters:
    buildOutputPath: $(Pipeline.Workspace)/Unsigned
    signOutputPath: $(Pipeline.Workspace)/FirstPartySigned
    alwaysCopy: true
    certificateId: CP-230012 # Authenticode certificate
    shouldSign: true # We always want to sign
    useMinimatch: true # This enables the use of globbing
    pattern: |
      # PowerShellEditorServices Script
      PowerShellEditorServices/*.{ps1,psd1,psm1,ps1xml}
      PowerShellEditorServices/Commands/**/*.{ps1,psd1,psm1,ps1xml}
      # PowerShellEditorServices Binaries
      PowerShellEditorServices/**/Microsoft.PowerShell.EditorServices*.dll
      # PowerShellEditorServices.VSCode Script
      PowerShellEditorServices.VSCode/PowerShellEditorServices.VSCode.psd1
      # PowerShellEditorServices.VSCode Binary
      PowerShellEditorServices.VSCode/bin/Microsoft.PowerShell.EditorServices.VSCode.dll

- template: EsrpSign.yml@ComplianceRepo
  parameters:
    buildOutputPath: $(Pipeline.Workspace)/FirstPartySigned
    signOutputPath: $(Pipeline.Workspace)/ThirdPartySigned
    alwaysCopy: true
    certificateId: CP-231522 # Third-party certificate
    shouldSign: true # We always want to sign
    useMinimatch: true # This enables the use of globbing
    pattern: |
      **/MediatR.dll
      **/Nerdbank.Streams.dll
      **/Newtonsoft.Json.dll
      **/OmniSharp*.dll
      **/Serilog*.dll

# The SBOM generation requires our original sources with the `dotnet restore`
# produced `project.assets.json` files.
- task: ExtractFiles@1
  displayName: Extract source artifacts
  inputs:
    archiveFilePatterns: $(Pipeline.Workspace)/PowerShellEditorServices-Sources-*/PowerShellEditorServices-Sources.zip
    destinationFolder: $(Pipeline.Workspace)/Sources
    cleanDestinationFolder: true

- template: Sbom.yml@ComplianceRepo
  parameters:
    BuildDropPath: $(Pipeline.Workspace)/ThirdPartySigned
    Build_Repository_Uri: https://github.com/PowerShell/PowerShellEditorServices.git
    packageName: PowerShellEditorServices
    packageVersion: $(System.JobId)
    sourceScanPath: $(Pipeline.Workspace)/Sources

- task: ArchiveFiles@2
  displayName: Zip signed artifacts
  inputs:
    rootFolderOrFile: $(Pipeline.Workspace)/ThirdPartySigned
    includeRootFolder: false
    archiveType: zip
    archiveFile: PowerShellEditorServices.zip
    replaceExistingArchive: true
    verbose: true

- checkout: self

- template: assembly-module-compliance.yml@ComplianceRepo
  parameters:
    # binskim
    AnalyzeTarget: $(Pipeline.Workspace)/*.dll
    AnalyzeSymPath: 'SRV*'
    # component-governance: requires the `project.assets.json` files
    sourceScanPath: $(Pipeline.Workspace)/Sources
    # credscan
    suppressionsFile: ''
    # TermCheck AKA PoliCheck
    targetArgument: $(Build.SourcesDirectory)/PowerShellEditorServices
    optionsUEPATH: $(Build.SourcesDirectory)/PowerShellEditorServices/tools/terms/UserExclusions.xml
    optionsRulesDBPath: ''
    optionsFTPath: $(Build.SourcesDirectory)/PowerShellEditorServices/tools/terms/FileTypeSet.xml
    # tsa-upload
    codeBaseName: PowerShell_PowerShellEditorServices_20210201
    # We don't use any Windows APIs directly, so we don't need API scan
    APIScan: false

- publish: PowerShellEditorServices.zip
  artifact: PowerShellEditorServices
  displayName: Publish signed pipeline artifacts
